#version 400

out vec4 FragColor;
  
in vec2 TexCoord;

uniform sampler2D BrightColor;  
uniform vec2 horizontal;


vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction)
{
    const float m = 1;
    vec4 color = vec4(0.0);
    vec2 off1 = vec2(1.411764705882353) * direction * m;
    vec2 off2 = vec2(3.2941176470588234) * direction * m;
    vec2 off3 = vec2(5.176470588235294) * direction * m;
    color += texture(image, uv) * 0.1964825501511404;
    color += texture(image, uv + (off1 / resolution)) * 0.2969069646728344;
    color += texture(image, uv - (off1 / resolution)) * 0.2969069646728344;
    color += texture(image, uv + (off2 / resolution)) * 0.09447039785044732;
    color += texture(image, uv - (off2 / resolution)) * 0.09447039785044732;
    color += texture(image, uv + (off3 / resolution)) * 0.010381362401148057;
    color += texture(image, uv - (off3 / resolution)) * 0.010381362401148057;
    return color;
}

vec3 KawaseBlurFilter( sampler2D tex, vec2 texCoord, vec2 pixelSize, float iteration )
{
    vec2 texCoordSample;
    vec2 halfPixelSize = pixelSize / 2.0f;
    vec2 dUV = ( pixelSize.xy * vec2( iteration, iteration ) ) + halfPixelSize.xy;

    vec3 cOut;

    // Sample top left pixel
    texCoordSample.x = texCoord.x - dUV.x;
    texCoordSample.y = texCoord.y + dUV.y;
    
    cOut = texture( tex, texCoordSample ).xyz;

    // Sample top right pixel
    texCoordSample.x = texCoord.x + dUV.x;
    texCoordSample.y = texCoord.y + dUV.y;

    cOut += texture( tex, texCoordSample ).xyz;

    // Sample bottom right pixel
    texCoordSample.x = texCoord.x + dUV.x;
    texCoordSample.y = texCoord.y - dUV.y;
    cOut += texture( tex, texCoordSample ).xyz;

    // Sample bottom left pixel
    texCoordSample.x = texCoord.x - dUV.x;
    texCoordSample.y = texCoord.y - dUV.y;

    cOut += texture( tex, texCoordSample ).xyz;

    // Average 
    cOut *= 0.25f;
    
    return cOut;
}

void main()
{
    FragColor = blur13(BrightColor, TexCoord, textureSize(BrightColor, 0), horizontal);
}